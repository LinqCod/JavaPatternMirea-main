Структурные паттерны решают проблемы эффективного построения связей между объектами.
Их цель — преобразование интерфейса одного класса в интерфейс того класса, который необходим на данный момент

Адаптер — это структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе.

- интерфейс класса, который хотим использовать не соответствует потребностям
- необходим класс, который должен взаимодействовать с другими классами, которые не известны или не связаны
- нужно юзать несколько существующих подклассов, но нецелесообразно использовать методы этих классов, создавая их новые подклассы

нормальный пример:
У интерфейса БД есть методы вставки, обновления, чтения, удаления;
Клиент-бд, который создаем экземпляр БД и использует методы интерфейса.
Программа - сохранение объекта, обновление объекта(изменение), загрузка объекта(загрузка), удаление объекта

таким образом повторяют похожие действия, но взаимодействовать не можем - для решения создадим адптер - наследуем приложение и иплементирует базуданных
тогда в каждом имплемент методе вызываем метод приложения

тогда меняем в раннере создание бд - на создание адаптера и все будет работать

Проблем: у нас есть класс и нужно, чтобы он реализовывал интерфейс, при этом класс менять нельзя()
при работе в команде надо реализовать класс, используя интерфейс, но такой класс есть, но не соответсвует требованиям
1)сделать новый класс с нуля и под требования
2)поменять класс\интерфейс - плохо с зависимостями
4)адаптер

Есть класс, реализация и идея, но требует доработки:

МОМЕНТЫ РЕАЛИЗАЦИИ:
1)класс: - наследуем от КИСОКЛАСА, и имплементиурем интерфейс
2)через экземпляр - юзаем экземпляр и делаем действия